// ===================== Utils: Números & Datas & Escapes =====================

function escapeHtml(str) {
  return String(str ?? "")
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#39;");
}

function norm(s) {
  const base = String(s ?? "").toLowerCase().normalize("NFD");
  let noDia;
  try {
    noDia = base.replace(/\p{Diacritic}/gu, "");
  } catch {
    noDia = base.replace(/[\u0300-\u036f]/g, "");
  }
  return noDia.replace(/\s+/g, " ").trim();
}

function safeDateFromAny(val) {
  if (val == null || val === "") return null;

  if (typeof val === "string") {
    const m = val.trim().match(/^(\d{1,2})\/(\d{1,2})\/(\d{2,4})$/);
    if (m) {
      const [, dd, mm, yy] = m;
      const y2 = parseInt(yy, 10);
      const y = yy.length === 2 ? (y2 >= 70 ? 1900 + y2 : 2000 + y2) : y2;
      const d = new Date(Date.UTC(y, parseInt(mm, 10) - 1, parseInt(dd, 10)));
      if (
        d.getUTCFullYear() === y &&
        d.getUTCMonth() === parseInt(mm, 10) - 1 &&
        d.getUTCDate() === parseInt(dd, 10)
      )
        return d;
      return null;
    }
  }

  if (typeof val === "number") {
    const ms = val < 1e12 ? val * 1000 : val;
    const d = new Date(ms);
    return isNaN(d.getTime()) ? null : d;
  }

  const d = new Date(val);
  return isNaN(d.getTime()) ? null : d;
}

function formatDateBR(value, fourDigitsYear = false) {
  if (!value) return "—";
  const d = safeDateFromAny(value);
  if (!d) return escapeHtml(String(value));
  const dd = String(d.getUTCDate()).padStart(2, "0");
  const mm = String(d.getUTCMonth() + 1).padStart(2, "0");
  const yyyy = String(d.getUTCFullYear());
  const yy = yyyy.slice(-2);
  return `${dd}/${mm}/${fourDigitsYear ? yyyy : yy}`;
}

function parseNumber(v) {
  if (v == null || (typeof v === "string" && !v.trim())) return 0;
  if (typeof v === "number") return Number.isFinite(v) ? v : 0;

  if (typeof v === "string") {
    let s = v.trim();
    // Suporta formato contábil com parênteses: (1.234,56) => -1.234,56
    const isParenNeg = /^\(.*\)$/.test(s);
    if (isParenNeg) s = s.slice(1, -1);

    s = s
      .replace(/[^\d,.-]/g, "")           // mantém dígitos, ., , e sinais
      .replace(/\.(?=\d{3}(\D|$))/g, "")  // remove separador de milhar "."
      .replace(",", ".");                 // vírgula decimal -> ponto

    let n = Number(s);
    if (!Number.isFinite(n)) return 0;
    if (isParenNeg) n = -n;
    return n;
  }

  const n = Number(v);
  return Number.isFinite(n) ? n : 0;
}

const brlFmt = new Intl.NumberFormat("pt-BR", {
  style: "currency",
  currency: "BRL",
  maximumFractionDigits: 2,
});

const formatBRL = (n) => brlFmt.format(parseNumber(n));
const toCents   = (n) => Math.round(parseNumber(n) * 100);
const fromCents = (c) => c / 100;

// ===================== Status & Cores =====================

function isConciliadoLike(status) {
  const s = norm(status);
  if (s.includes("nao conciliado")) return false;
  const isConciliadoExato = /\bconciliado\b/.test(s) && !s.includes("parcial") && !s.includes("diverg");
  const isPerfeita = s.includes("perfeita");
  return isConciliadoExato || isPerfeita;
}

function statusBg(status) {
  const s = norm(status);
  if (s.includes("nf em aberto")) return "#e3f2fd";        // azul claro
  if (s.includes("recebimento a maior")) return "#e0f7fa"; // ciano claro
  if (s.includes("pagamento a maior")) return "#f3e5f5";   // roxo claro
  if (s.includes("nao conciliado")) return "#ffebee";      // vermelho claro
  if (isConciliadoLike(s)) return "#e8f5e9";               // verde claro
  if (/\bparcial\w*|\bdiverg\w*/.test(s)) return "#fff8e1";// amarelo claro
  return "#f5f5f5"; // neutro
}

function statusPillColor(status) {
  const s = norm(status);
  if (s.includes("nf em aberto")) return "#1565c0";        // azul
  if (s.includes("recebimento a maior")) return "#00838f"; // teal
  if (s.includes("pagamento a maior")) return "#6a1b9a";   // roxo
  if (s.includes("nao conciliado")) return "#c62828";      // vermelho
  if (isConciliadoLike(s)) return "#2e7d32";               // verde
  if (/\bparcial\w*|\bdiverg\w*/.test(s)) return "#b7791f";// amarelo escuro
  return "#333";
}

function getStatusPriority(status) {
  const s = norm(status);

  // Ordem (asc): Conciliado → Divergente → NF em Aberto → Recebimento a Maior → Pagamento a Maior → Não Conciliado → Outros
  if (isConciliadoLike(s)) return 1;
  if (/\bparcial\w*|\bdiverg\w*/.test(s)) return 2;
  if (/\bnf\s+em\s+aberto\b/.test(s)) return 3;
  if (/\brecebimento\s+a\s+maior\b/.test(s)) return 4;
  if (/\bpagamento\s+a\s+maior\b/.test(s)) return 5;
  if (/\bnao\s+conciliado\b/.test(s)) return 6;
  return 99;
}

function statusBucketLabel(statusRaw) {
  const s = norm(statusRaw ?? "");

  if (isConciliadoLike(s)) return "Conciliado";
  // Variações de "parcial"/"diverg*"
  if (/\bconciliacao\s+diverg\w*/.test(s) || /\bparcial\w*/.test(s) || /\bdiverg\w*/.test(s)) {
    return "Conciliação Divergente";
  }
  if (/\bnf\s+em\s+aberto\b/.test(s)) return "NF em Aberto";
  if (/\brecebimento\s+a\s+maior\b/.test(s)) return "Recebimento a Maior";
  if (/\bpagamento\s+a\s+maior\b/.test(s)) return "Pagamento a Maior";
  if (/\bnao\s+conciliado\b/.test(s)) return "Não Conciliado";

  return "Não Encontrado/Outros";
}

// ===================== Helpers de Leitura Flexível =====================

function toArrayLaunch(v) {
  if (Array.isArray(v)) return v;
  if (v == null) return [];
  if (typeof v === "string") return v.split(",").map(s => s.trim()).filter(Boolean);
  return [String(v)];
}

// Detecta se um objeto é claramente "config" e não uma linha de dados
function isConfigItem(obj) {
  if (!obj || typeof obj !== "object") return false;

  if (Array.isArray(obj.data)) return false;

  const configKeys = new Set(['sortorder', 'order', 'sortfield', 'field', 'sortby', 'showdetails']);
  const keys = Object.keys(obj).map(k => k.toLowerCase());
  const hasAnyConfig = keys.some(k => configKeys.has(k));
  if (!hasAnyConfig) return false;

  const rowHints = ['nf','status','valor_creditado','valor debitado','valor_debitado','credito','debito','data','date','dt','dt_emissao','emissao','cnpj','empresa'];
  const hasRowHints = keys.some(k => rowHints.includes(k));
  return !hasRowHints;
}

function normalizeRows(items) {
  const rows = [];
  for (let idx = 0; idx < (items?.length ?? 0); idx++) {
    const it = items[idx];

    // Preferência: array em json.data
    if (Array.isArray(it?.json?.data)) {
      rows.push(...it.json.data);
      continue;
    }

    // Objeto em it.json
    if (it?.json && typeof it.json === 'object') {
      if (!isConfigItem(it.json)) rows.push(it.json);
      continue;
    }

    // Objeto "cru"
    if (it && typeof it === 'object') {
      rows.push(it);
    }
  }
  return rows;
}

function normalizeKeyName(k) {
  const base = String(k ?? '').toLowerCase().normalize('NFD');
  let noDia;
  try {
    noDia = base.replace(/\p{Diacritic}/gu, '');
  } catch {
    noDia = base.replace(/[\u0300-\u036f]/g, '');
  }
  return noDia.replace(/[^a-z0-9]/g, '');
}

function pickFlexibleField(obj, candidateNames) {
  if (!obj || typeof obj !== 'object') return undefined;
  const map = new Map();
  for (const key of Object.keys(obj)) {
    map.set(normalizeKeyName(key), key);
  }
  const targets = candidateNames.map(normalizeKeyName);

  for (const t of targets) if (map.has(t)) return obj[map.get(t)];
  for (const t of targets) for (const [nk, orig] of map.entries()) if (nk.startsWith(t)) return obj[orig];
  for (const t of targets) for (const [nk, orig] of map.entries()) if (nk.includes(t)) return obj[orig];

  return undefined;
}

function readMoneyFieldFlexible(obj, candidateNames) {
  const v = pickFlexibleField(obj, candidateNames);
  if (v === undefined || v === null || (typeof v === 'string' && v.trim() === '')) return null;
  return toCents(v);
}

function pickDateCell(r, preferredField) {
  return preferredField && r?.[preferredField] != null
    ? r[preferredField]
    : (r.data ?? r.date ?? r.dt ?? r.data_nf ?? r.dt_emissao ?? r.emissao ?? r.emissão ?? r.data_lancamento ?? null);
}

// ===================== Config =====================

function getSortConfig(items) {
  const cfg = items?.[0]?.json || {};
  const orderRaw = (cfg.sortOrder || cfg.order || '').toString().toLowerCase();
  const sortOrder = (orderRaw === 'desc' || orderRaw === 'descending') ? 'desc' : 'asc';
  const sortField = cfg.sortField || cfg.field || null;
  const sortBy = (cfg.sortBy || 'status+date').toLowerCase();
  const showDetails = cfg.showDetails !== false; // padrão: true
  return { sortOrder, sortField, sortBy, showDetails };
}

// ===================== Histórico =====================

function deriveHistory(r) {
  const origem = r?.historico_origem;
  let full = '';
  if (origem) {
    full = String(origem);
  } else {
    const hc = Array.isArray(r?.historico_credito) ? r.historico_credito : (r?.historico_credito ? [r.historico_credito] : []);
    const hd = Array.isArray(r?.historico_debito) ? r.historico_debito : (r?.historico_debito ? [r.historico_debito] : []);
    const uniq = [...new Set([...hc, ...hd].filter(Boolean).map(String))];
    full = uniq.join(' | ');
  }
  const trimmed = full.trim();
  if (!trimmed) return { display: '—', title: '' };

  const maxLen = 120;
  const display = trimmed.length > maxLen ? trimmed.slice(0, maxLen) + '…' : trimmed;
  return { display: escapeHtml(display), title: escapeHtml(trimmed) };
}

// ===================== UI: Totais (cards) =====================

function renderTotalsCards(totals, totalGeralCredito, totalGeralDebito) {
  const ORDER = [
    'Conciliado',
    'Conciliação Divergente',
    'NF em Aberto',
    'Recebimento a Maior',
    'Pagamento a Maior',
    'Não Conciliado',
    'Não Encontrado/Outros',
  ];

  const STYLE = {
    'Conciliado':              { bg:'#e8f5e9', border:'rgba(46,125,50,.25)', title:'#1f3b2a' },
    'Conciliação Divergente':  { bg:'#fff8e1', border:'rgba(249,168,37,.25)', title:'#4a3a0a' },
    'NF em Aberto':            { bg:'#e3f2fd', border:'rgba(21,101,192,.25)', title:'#102a43' },
    'Recebimento a Maior':     { bg:'#e0f7fa', border:'rgba(0,131,143,.25)',  title:'#0a2a2e' },
    'Pagamento a Maior':       { bg:'#f3e5f5', border:'rgba(106,27,154,.25)', title:'#2e1140' },
    'Não Conciliado':          { bg:'#ffebee', border:'rgba(198,40,40,.25)',  title:'#411316' },
    'Não Encontrado/Outros':   { bg:'#eeeeee', border:'#d1d5db',              title:'#111827' },
  };

  const cardsHtml = ORDER
    .filter(lbl => (totals[lbl]?.count || 0) > 0) // esconde vazios
    .map(lbl => {
      const t = totals[lbl];
      const st = STYLE[lbl];
      return `
  <div class="card-mini" style="background:${st.bg};border:1px solid ${st.border}">
    <div class="mini-title" style="color:${st.title}">${lbl}</div>
    <div class="mini-count" style="color:#0f172a">${t.count} lanç.</div>
    <div class="mini-sub" style="color:#1f2937">Crédito ${formatBRL(fromCents(t.credito))} · Débito ${formatBRL(fromCents(t.debito))}</div>
  </div>`;
    }).join('');

  const totalCard = `
  <div class="card-mini total">
    <div class="mini-title" style="color:#0f172a">Total Geral</div>
    <div class="mini-count" style="color:#0f172a">Saldo: ${formatBRL(fromCents(totalGeralCredito - totalGeralDebito))}</div>
    <div class="mini-sub"   style="color:#1f2937">Crédito ${formatBRL(fromCents(totalGeralCredito))} · Débito ${formatBRL(fromCents(totalGeralDebito))}</div>
  </div>`;

  return `<div class="mini-grid">
${cardsHtml}
${totalCard}
</div>`;
}

// ===================== HTML Builder (LiquidGlass + Logo) =====================

function buildHtml(rows, sortOrder, sortField, sortBy, showDetails) {
  const empresa = escapeHtml(rows[0]?.empresa ?? '');
  const cnpj    = escapeHtml(rows[0]?.cnpj ?? '');

  // conta_* dos itens (primeiro não-vazio)
  const contaNumeroRaw   = firstNonEmpty(rows, ['conta_numero', 'conta_num']);
  const contaCodigoRaw   = firstNonEmpty(rows, ['conta_codigo', 'conta_cod']);
  const contaDescrRaw    = firstNonEmpty(rows, ['conta_descricao', 'conta_desc']);

  const contaNumero = contaNumeroRaw == null ? '—' : escapeHtml(String(contaNumeroRaw));
  const contaCodigo = contaCodigoRaw == null ? '—' : escapeHtml(String(contaCodigoRaw));
  const contaDescr  = contaDescrRaw  == null ? '—' : escapeHtml(String(contaDescrRaw));

  // Precompute helpers
  const prepared = rows.map((r, idx) => {
    const dateCell = pickDateCell(r, sortField);
    const d = safeDateFromAny(dateCell);
    const ts = d ? d.getTime() : new Date('1900-01-01T00:00:00Z').getTime();

    const creditoCents = (readMoneyFieldFlexible(r, ['valor_creditado', 'credito', 'valor credito']) ?? 0);
    const debitoCents  = (readMoneyFieldFlexible(r, ['valor_debitado',  'debito',  'valor debito'])  ?? 0);

    const nfKey = String(r.nf ?? '').padStart(20, '0');
    const statusPri = getStatusPriority(r.status);
    const statusRaw = r.status ?? '';
    const statusGroup = statusBucketLabel(statusRaw);

    return { r, idx, ts, creditoCents, debitoCents, nfKey, statusPri, dateCell, statusRaw, statusGroup };
  });

  // Ordenação (com estabilidade por grupo)
  prepared.sort((A, B) => {
    const a = A, b = B;
    let diff = 0;

    if (sortBy === 'status' || sortBy === 'status+date') {
      diff = a.statusPri - b.statusPri;
      if (diff !== 0) return sortOrder === 'desc' ? -diff : diff;
      diff = a.statusGroup.localeCompare(b.statusGroup);
      if (diff !== 0) return sortOrder === 'desc' ? -diff : diff;
    }

    if (sortBy === 'date' || sortBy === 'status+date') {
      diff = a.ts - b.ts;
      if (diff !== 0) return sortOrder === 'desc' ? -diff : diff;
    }

    diff = a.nfKey.localeCompare(b.nfKey) || (a.creditoCents - b.creditoCents) || (a.idx - b.idx);
    return sortOrder === 'desc' ? -diff : diff;
  });

  // Totais em centavos (cards)
  const totals = {
    'Conciliado': { count: 0, credito: 0, debito: 0 },
    'Conciliação Divergente': { count: 0, credito: 0, debito: 0 },
    'NF em Aberto': { count: 0, credito: 0, debito: 0 },
    'Recebimento a Maior': { count: 0, credito: 0, debito: 0 },
    'Pagamento a Maior': { count: 0, credito: 0, debito: 0 },
    'Não Conciliado': { count: 0, credito: 0, debito: 0 },
    'Não Encontrado/Outros': { count: 0, credito: 0, debito: 0 },
  };
  let totalGeralCredito = 0;
  let totalGeralDebito = 0;

  function renderSubtotalRow(label, creditoSum, debitoSum) {
    const safe = escapeHtml(String(label ?? ''));
    return `
<tr class="subtotal">
  <td colspan="2"><strong>Subtotal — ${safe}</strong></td>
  <td class="right"><strong>${formatBRL(fromCents(creditoSum))}</strong></td>
  <td class="right"><strong>${formatBRL(fromCents(debitoSum))}</strong></td>
  <td colspan="4"> </td>
</tr>`;
  }

  function renderHeaderRow() {
    return `
<tr>
  <th>Data</th>
  <th>NF</th>
  <th class="right">Valor Creditado</th>
  <th class="right">Valor Debitado</th>
  <th>Histórico</th>
  <th>Status</th>
  <th>Lanç. Crédito</th>
  <th>Lanç. Débito</th>
</tr>`;
  }

  // Linhas detalhadas por lançamento (filhas)
  function renderDetalheRows(r) {
    const cred = Array.isArray(r.detalhes_credito) ? r.detalhes_credito : [];
    const deb  = Array.isArray(r.detalhes_debito)  ? r.detalhes_debito  : [];

    let html = '';

    for (const l of cred) {
      const data = l?.data ? formatDateBR(l.data, false) : '—';
      const num  = l?.numero == null ? '—' : escapeHtml(String(l.numero));
      const val  = formatBRL(l?.valor ?? 0);
      const hist = l?.historico ? escapeHtml(String(l.historico)) : '';

      html += `
<tr class="det det-cred">
  <td class="pad">${data}</td>
  <td>—</td>
  <td class="right">${val}</td>
  <td class="right">—</td>
  <td class="hist">${hist}</td>
  <td class="tag cred">Crédito</td>
  <td>${num}</td>
  <td>—</td>
</tr>`;
    }

    for (const l of deb) {
      const data = l?.data ? formatDateBR(l.data, false) : '—';
      const num  = l?.numero == null ? '—' : escapeHtml(String(l.numero));
      const val  = formatBRL(l?.valor ?? 0);
      const hist = l?.historico ? escapeHtml(String(l.historico)) : '';

      html += `
<tr class="det det-deb">
  <td class="pad">${data}</td>
  <td>—</td>
  <td class="right">—</td>
  <td class="right">${val}</td>
  <td class="hist">${hist}</td>
  <td class="tag deb">Débito</td>
  <td>—</td>
  <td>${num}</td>
</tr>`;
    }

    return html;
  }

  let bodyRows = '';
  let currentGroup = null;
  let groupCred = 0;
  let groupDeb = 0;

  // Status que NÃO devem exibir detalhes (independente do toggle)
  const NO_DETAILS_GROUPS = new Set(['NF em Aberto', 'Recebimento a Maior', 'Pagamento a Maior']);

  for (const { r, creditoCents, debitoCents, dateCell, statusRaw, statusGroup } of prepared) {
    if (currentGroup === null) {
      currentGroup = statusGroup;
      groupCred = 0;
      groupDeb = 0;
    } else if (statusGroup !== currentGroup) {
      bodyRows += renderSubtotalRow(currentGroup, groupCred, groupDeb);
      bodyRows += renderHeaderRow();
      currentGroup = statusGroup;
      groupCred = 0;
      groupDeb = 0;
    }

    groupCred += creditoCents;
    groupDeb += debitoCents;

    totals[statusGroup] ??= { count: 0, credito: 0, debito: 0 };
    totals[statusGroup].count += 1;
    totals[statusGroup].credito += creditoCents;
    totals[statusGroup].debito += debitoCents;
    totalGeralCredito += creditoCents;
    totalGeralDebito += debitoCents;

    const dataFmt = formatDateBR(dateCell);
    const nf = (r.nf === null || r.nf === undefined || r.nf === '') ? '—' : escapeHtml(String(r.nf));
    const lcredArr = toArrayLaunch(r.lancamento_credito);
    const ldebArr = toArrayLaunch(r.lancamento_debito);
    const lcred = lcredArr.length ? escapeHtml(lcredArr.join(', ')) : '—';
    const ldeb = ldebArr.length ? escapeHtml(ldebArr.join(', ')) : '—';
    const hist = deriveHistory(r);
    const pillColor = statusPillColor(statusRaw);
    const statusTxt = escapeHtml(String(statusRaw));

    // Linha "resumo"
    bodyRows += `
<tr style="background:${statusBg(statusRaw)}">
  <td>${dataFmt}</td>
  <td>${nf}</td>
  <td class="right">${formatBRL(fromCents(creditoCents))}</td>
  <td class="right">${formatBRL(fromCents(debitoCents))}</td>
  <td class="hist" title="${hist.title}">${hist.display}</td>
  <td>
    <span class="pill" style="
      color:${pillColor};
    ">${statusTxt}</span>
  </td>
  <td>${lcred}</td>
  <td>${ldeb}</td>
</tr>`;

    // Detalhes (se existirem e se permitido pelo grupo)
    if (showDetails && !NO_DETAILS_GROUPS.has(statusGroup)) {
      if ((Array.isArray(r.detalhes_credito) && r.detalhes_credito.length) ||
          (Array.isArray(r.detalhes_debito)  && r.detalhes_debito.length)) {
        bodyRows += renderDetalheRows(r);
      }
    }
  }

  if (currentGroup !== null) {
    bodyRows += renderSubtotalRow(currentGroup, groupCred, groupDeb);
  }

  const legend = `
<div class="legend">
  <span class="leg leg-ok">Conciliado</span>
  <span class="leg leg-div">Conciliação Divergente</span>
  <span class="leg leg-open">NF em Aberto</span>
  <span class="leg leg-more-r">Recebimento a Maior</span>
  <span class="leg leg-more-p">Pagamento a Maior</span>
  <span class="leg leg-no">Não Conciliado</span>
  <span class="leg leg-oth">Outros</span>
</div>`;

  const totalsHtml = renderTotalsCards(totals, totalGeralCredito, totalGeralDebito);

  const contaInfoHtml = `
<div class="conta">${contaNumero} · ${contaCodigo} · ${contaDescr}</div>`;

  const generatedAt = new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' });

  // --- TOGGLE button + script
  const controlsHtml = `
<button id="toggleDetails" onclick="toggleDetails()" aria-pressed="false">
  ${showDetails ? 'Ocultar detalhes' : 'Mostrar detalhes'}
</button>`;

  const toggleScript = `
<script>
(function(){
  const LS_KEY = 'relatorio_show_details';
  const initial = ${showDetails ? 'true' : 'false'};
  let show = (function(){
    try {
      const raw = localStorage.getItem(LS_KEY);
      return raw == null ? initial : JSON.parse(raw);
    } catch { return initial; }
  })();

  function apply(){
    var rows = document.querySelectorAll('tr.det');
    for (var i=0;i<rows.length;i++){ rows[i].style.display = show ? '' : 'none'; }
    var btn = document.getElementById('toggleDetails');
    if (btn){
      btn.textContent = show ? 'Ocultar detalhes' : 'Mostrar detalhes';
      btn.setAttribute('aria-pressed', show ? 'true' : 'false');
    }
  }

  window.toggleDetails = function(){
    show = !show;
    try { localStorage.setItem(LS_KEY, JSON.stringify(show)); } catch {}
    apply();
  };

  if (!show) {
    // evita "flash" de detalhes quando estado inicial é oculto
    document.addEventListener('DOMContentLoaded', function(){
      var style = document.createElement('style');
      style.id = 'detHiddenInit';
      style.textContent = 'tr.det{display:none}';
      document.head.appendChild(style);
      apply();
      var s = document.getElementById('detHiddenInit');
      if (s) setTimeout(function(){ s.parentNode && s.parentNode.removeChild(s); }, 0);
    });
  } else {
    document.addEventListener('DOMContentLoaded', apply);
  }
})();
</script>`;

  // === HTML final ===
  return `<!doctype html>
<html lang="pt-br">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Relatório de Conciliação</title>
<style>
  /* ===== Tokens ===== */
  :root{
    --c1:#22d3ee; /* cyan */
    --c2:#8b5cf6; /* violet */

    --text:#0b1220;
    --muted:#6b7280;
    --sheet:rgba(255,255,255,.66);
    --sheet-border:rgba(2,6,23,.10);
    --glass-blur:16px;
    --glass-sat:180%;
  }
  @media (prefers-color-scheme: dark){
    :root{
      --text:#e5e7eb;
      --muted:#9ca3af;
      --sheet:rgba(11,18,32,.40);
      --sheet-border:rgba(148,163,184,.18);
    }
  }

  html,body{height:100%}
  body{
    margin:0;
    color:var(--text);
    font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen,Ubuntu,'Helvetica Neue',Arial,sans-serif;
    line-height:1.45;
    background:
      radial-gradient(1400px 900px at 15% -10%, rgba(139,92,246,.15), transparent 60%),
      radial-gradient(1200px 900px at 110% 10%, rgba(34,211,238,.14), transparent 60%),
      linear-gradient(180deg,#f8fafc,#eef2ff 30%,#fafafa);
  }
  @media (prefers-color-scheme: dark){
    body{
      background:
        radial-gradient(1400px 900px at 15% -10%, rgba(139,92,246,.12), transparent 60%),
        radial-gradient(1200px 900px at 110% 10%, rgba(34,211,238,.10), transparent 60%),
        linear-gradient(180deg,#0f172a,#0b1220 40%,#0f172a);
    }
  }

  .page{
    min-height:100dvh;
    display:grid;
    place-items:start center;
    padding:28px;
    position:relative;
    overflow:hidden;
  }

  /* Bolhas animadas */
  .page::before,.page::after{
    content:"";
    position:absolute;
    z-index:0;
    width:56vmax;height:56vmax;
    filter:blur(40px);
    opacity:.24;
    transform:translate(-10%,-15%);
    pointer-events:none;
    animation:lg-blob 14s ease-in-out infinite alternate;
  }
  .page::before{
    left:-20vmax; top:-25vmax;
    background:
      radial-gradient(closest-side at 40% 40%, var(--c2), transparent 60%),
      radial-gradient(closest-side at 70% 60%, var(--c1), transparent 65%);
  }
  .page::after{
    right:-18vmax; bottom:-30vmax;
    background:
      radial-gradient(closest-side at 50% 50%, var(--c1), transparent 60%),
      radial-gradient(closest-side at 65% 40%, var(--c2), transparent 65%);
    animation-duration:16s;
  }
  @keyframes lg-blob{ to{ transform:translate(10%,5%) scale(1.06);} }
  @media (prefers-color-scheme: dark){ .page::before,.page::after{ opacity:.20; } }
  @media (prefers-reduced-motion: reduce){ .page::before,.page::after{ animation:none; } }

  /* ===== Sheet (glass) ===== */
  .sheet{
    z-index:1;
    width:min(1200px, 92vw);
    margin:auto;
    background:var(--sheet);
    border:1px solid var(--sheet-border);
    border-radius:18px;
    box-shadow:0 18px 50px rgba(2,6,23,.28);
    backdrop-filter:saturate(var(--glass-sat)) blur(var(--glass-blur));
    -webkit-backdrop-filter:saturate(var(--glass-sat)) blur(var(--glass-blur));
    padding:22px;
  }

  /* ===== Logo (glasschip) ===== */
  .logo{
    display:flex;
    align-items:center;
    justify-content:center;
    margin: 4px 0 10px 0;
  }
  .glasschip{
    padding:8px 12px;
    border-radius:12px;
    background: rgba(255,255,255,.55);
    border: 1px solid rgba(2,6,23,.08);
    backdrop-filter: saturate(140%) blur(10px);
    -webkit-backdrop-filter: saturate(140%) blur(10px);
  }
  @media (prefers-color-scheme: dark){
    .glasschip{
      background: rgba(11,18,32,.35);
      border-color: rgba(148,163,184,.18);
    }
  }
  .logo img{
    max-height:72px; width:auto; height:auto;
    image-rendering: -webkit-optimize-contrast;
    filter: drop-shadow(0 2px 6px rgba(2,6,23,.12));
  }
  @media (max-width: 420px){ .logo img{ max-height: 60px; } }
  @media (prefers-color-scheme: dark){
    .logo img{ filter: drop-shadow(0 2px 6px rgba(0,0,0,.35)) brightness(1.05); }
  }
  @media print{
    .logo{ margin: 0 0 6px 0; }
    .logo img{ filter: none; max-height: 52px; }
  }

  /* ===== Cabeçalho ===== */
  h1{
    margin:0 0 6px 0;
    font-weight:900;
    text-align:center;
    font-size:clamp(18px, 2.2vw, 28px);
    letter-spacing:.01em;
    background:linear-gradient(100deg,
      color-mix(in srgb, var(--c1) 80%, #0a0a0a 20%),
      color-mix(in srgb, var(--c2) 80%, #0a0a0a 20%)
    );
    -webkit-background-clip:text;
    -webkit-text-fill-color:transparent;
    background-clip:text;
    color:transparent;
  }
  .sub{font-size:12px;color:var(--muted);text-align:center;margin-bottom:14px}
  .conta{ text-align:center; margin:8px 0 16px 0; color:var(--text); font-weight:800; }

  /* ===== Legend ===== */
  .legend{
    display:flex; flex-wrap:wrap; gap:8px;
    align-items:center; justify-content:center;
    margin:.5rem 0 1rem 0;
    font-size:12px; color: #222;
  }
  .leg{display:inline-flex;align-items:center;gap:8px;padding:.35rem .6rem;border-radius:999px;background:#fff;border:1px solid rgba(0,0,0,.06)}
  .leg::before{content:"";width:12px;height:12px;border-radius:2px;background:#ccc;display:inline-block}
  .leg-ok::before{background:#2e7d32}
  .leg-div::before{background:#b7791f}
  .leg-open::before{background:#1565c0}
  .leg-more-r::before{background:#00838f}
  .leg-more-p::before{background:#6a1b9a}
  .leg-no::before{background:#c62828}
  .leg-oth::before{background:#9e9e9e}

  /* ===== Cards de total ===== */
  .mini-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(240px,1fr));gap:12px;margin:12px 0 16px 0}
  .card-mini{border-radius:12px;padding:12px;background:#f5f5f5;border:1px solid #ddd}
  .card-mini.total{background:rgba(255,255,255,.75);backdrop-filter:blur(6px);-webkit-backdrop-filter:blur(6px)}
  .mini-title{font-size:12px;font-weight:800;margin-bottom:4px}
  .mini-count{font-weight:900}
  .mini-sub{font-size:12px}

  /* ===== Toolbar / Botão ===== */
  .toolbar{display:flex;justify-content:center;margin:10px 0 16px 0}
  #toggleDetails{
    border:none; border-radius:999px; padding:.6rem 1rem; font-weight:900; color:#fff; cursor:pointer;
    background:linear-gradient(100deg,
      color-mix(in srgb, var(--c1) 55%, #0a0a0a 45%),
      color-mix(in srgb, var(--c2) 55%, #0a0a0a 45%)
    ); /* mais escuro */
    box-shadow:inset 0 0 0 1px rgba(255,255,255,.10), 0 6px 16px rgba(31,41,55,.35);
    transition:transform .08s ease, filter .2s ease;
  }
  #toggleDetails:hover{ filter:brightness(1.06); }
  #toggleDetails:active{ transform:translateY(1px); filter:brightness(0.96); }
  #toggleDetails:focus-visible{ outline:3px solid color-mix(in oklab, var(--c2) 65%, white 35%); outline-offset:3px; }

  /* ===== Tabela ===== */
  .table-wrap{overflow:auto; border-radius:12px; border:1px solid rgba(0,0,0,.08); background:#fff}
  table{border-collapse:collapse;width:100%; min-width:880px}
  th,td{border-bottom:1px solid #e5e7eb; padding:10px 12px; vertical-align:top; color:#111}
  th{background:#e9eef6;text-align:left; position:sticky; top:0; z-index:1; font-size:.86rem}
  td{background:#fdfdfd; font-size:.86rem; color:#111}
  tbody tr:nth-child(even) td{ background:#f6f7fb; } /* zebra mais escura */
  .right{text-align:right}
  .hist{max-width:520px;word-break:break-word}
  .subtotal td{background:#e2e8f0 !important; color:#0b1220 !important}

  .pill{
    display:inline-block;padding:.25rem .6rem;border-radius:999px;font-weight:800;
    border:1px solid rgba(0,0,0,.08); background:#fff; font-size:.76rem;
  }

  /* Detalhes */
  tr.det td{font-size:12px;border-top:none;border-bottom:1px dashed #d1d5db;background:#fff}
  tr.det-cred td{background:#f3f8ff}
  tr.det-deb  td{background:#f7f3ff}
  td.pad{padding-left:22px}
  .tag{font-size:12px;font-weight:900}
  .tag.cred{color:#1565c0}
  .tag.deb {color:#6a1b9a}

  /* Impressão */
  @media print {
    body { background:#fff !important; }
    .page::before,.page::after{ display:none !important; }
    .sheet{ box-shadow:none; border:0; padding:0; }
    .toolbar{ display:none; }
    h1{ -webkit-text-fill-color:initial; color:#111 !important; background:none !important; }
    .table-wrap{ border:0; }
    th{ position:static; }
    .mini-grid{ grid-template-columns:repeat(2,1fr); }
  }

  /* Fallback sem color-mix */
  @supports not (color: color-mix(in srgb, white 50%, black 50%)){
    h1{ background:linear-gradient(100deg,#0ea5b5,#5b21b6);
        -webkit-background-clip:text;-webkit-text-fill-color:transparent;background-clip:text;color:transparent; }
    #toggleDetails{ background:linear-gradient(100deg,#0e7490,#4c1d95); }
  }
</style>
</head>
<body>
  <div class="page">
    <div class="sheet" role="region" aria-label="Relatório de Conciliação">
      <div class="logo">
        <div class="glasschip">
          <img src="https://elevagestaofinanceira.com.br/wp-content/uploads/2023/04/site_layout_eleva_LOGO_color_600x300px_03_04_23.png" alt="Eleva Logo">
        </div>
      </div>

      <h1>Relatório de Conciliação — ${empresa} — ${cnpj}</h1>
      <div class="sub">Gerado em ${escapeHtml(generatedAt)}</div>
      ${legend}
      ${totalsHtml}
      <div class="conta">${contaNumero} · ${contaCodigo} · ${contaDescr}</div>

      <div class="toolbar">${controlsHtml}</div>

      <div class="table-wrap">
        <table>
          <thead>
            ${renderHeaderRow()}
          </thead>
          <tbody>
            ${bodyRows}
          </tbody>
        </table>
      </div>
    </div>
  </div>
  ${toggleScript}
</body>
</html>`;
}

// ===================== Aux: firstNonEmpty =====================

function firstNonEmpty(rows, keys) {
  for (const r of rows) {
    for (const k of keys) {
      const v = r?.[k];
      if (v !== undefined && v !== null && String(v).trim() !== '') return v;
    }
  }
  return null;
}

// ===================== Execução no n8n =====================

const rows = normalizeRows(items);
const { sortOrder, sortField, sortBy, showDetails } = getSortConfig(items);

const html = rows.length
  ? buildHtml(rows, sortOrder, sortField, sortBy, showDetails)
  : `<!doctype html><meta charset="utf-8"><title>Relatório de Conciliação</title>
     <style>body{font-family:system-ui;margin:24px}</style>
     <h1>Relatório de Conciliação</h1>
     <p>Nenhuma linha para exibir.</p>`;

return [
  {
    json: {
      fileName: 'relatorio_conciliacao.html',
      mimeType: 'text/html',
      note: `HTML gerado. Ordenação: ${sortBy} (${sortOrder})${sortField ? `, campo: ${sortField}` : ''}. Detalhes: ${showDetails ? 'visíveis' : 'ocultos'} (grupos "NF em Aberto", "Pagamento a Maior" e "Recebimento a Maior" sempre sem detalhes). Cards ocultam categorias com 0 lançamentos.`,
    },
    binary: {
      data: {
        data: Buffer.from(html, 'utf8').toString('base64'),
        mimeType: 'text/html',
        fileName: 'relatorio_conciliacao.html',
      }
    }
  }
];